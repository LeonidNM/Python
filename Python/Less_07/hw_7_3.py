# 3. Реализовать программу работы с органическими клетками, 
# состоящими из ячеек. Необходимо создать класс Клетка. 
# В его конструкторе инициализировать параметр, 
# соответствующий количеству ячеек клетки (целое число). 
# В классе должны быть реализованы методы перегрузки 
# арифметических операторов: сложение (__add__()), 
# вычитание (__sub__()), умножение (__mul__()), 
# деление (__truediv__()). Данные методы должны применяться 
# только к клеткам и выполнять увеличение, уменьшение, 
# умножение и целочисленное (с округлением до целого) 
# деление клеток, соответственно.
# Сложение. Объединение двух клеток. 
# При этом число ячеек общей клетки должно равняться сумме ячеек 
# исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять 
# только если разность количества ячеек двух клеток больше нуля, 
# иначе выводить соответствующее сообщение.
# Умножение. Создаётся общая клетка из двух. 
# Число ячеек общей клетки определяется как произведение 
# количества ячеек этих двух клеток.
# Деление. Создаётся общая клетка из двух. 
# Число ячеек общей клетки определяется как целочисленное деление 
# количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), 
# принимающий экземпляр класса и количество ячеек в ряду. 
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., 
# где количество ячеек между \n равно переданному аргументу. 
# Если ячеек на формирование ряда не хватает, 
# то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, 
# количество ячеек в ряду — 5. Тогда метод make_order() 
# вернёт строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, 
# количество ячеек в ряду — 5. 
# Тогда метод make_order() вернёт строку: *****\n*****\n*****.

class Cell:
    def __init__(self, quant):
        self.quant = int(quant)

    def __add__(self, oth):
        print(self.quant + oth.quant)

    def __sub__(self, oth):
        sub = self.quant - oth.quant
        if sub > 0:
            print(sub)
        else:
            print('Операция невозможна')

    def __truediv__(self, oth):
        print(self.quant // oth.quant)

    def __mul__(self, oth):
        print(self.quant * oth.quant)

    def make_order(self, row):
        res = ''
        for i in range(int(self.quant / row)):
            res += '*' * row + '\n'
        res += '*' * (self.quant % row) + '\n'
        print(res)


cell_1 = Cell(12)
cell_2 = Cell(2)
cell_1 + cell_2
cell_1 - cell_2
cell_1 / cell_2
cell_1 * cell_2
cell_1.make_order(7)
cell_2.make_order(10)
